name: build-release-binary

run-name: Create Github Release for Java Spring Boot built with Gradle

on: 
  push:
    #branches:
    #- main
    tags:
    - 'r*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # get all tags, needed to get git log
        ref: main
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: gradle
        
    - name: Validate Gradle wrapper matches official SHA-256 checksums for security
      uses: gradle/wrapper-validation-action@v1

    - name: Execute Gradle build
      run: ./gradlew bootJar

    - run: git version
    - run: git branch
    - run: git tag

    - name: get semantic tag version and release notes from commit messages
      id: tag 
      run: |
        curtag=${GITHUB_REF_NAME}
        major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
        patch=$(echo "$curtag" | cut -d'.' -f3)
        # avoid empty patch number
        [ -n "$patch" ] && ((patch--)) || patch=".x"
        prevtag="${major_minor}.${patch}"

        echo "" > body.log
        if git tag | grep $prevtag ; then
          git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
        else
          git log --pretty="- %s" -q --no-color >> body.log
        fi
        line_count=$(cat body.log | wc -l)

        echo "curtag=$curtag" >> $GITHUB_OUTPUT
        echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
        echo "line_count=$line_count" >> $GITHUB_OUTPUT

    - run: echo curtag is ${{ steps.tag.outputs.curtag }}
    - run: echo prevtag is ${{ steps.tag.outputs.prevtag }}
    - run: echo line_count is ${{ steps.tag.outputs.line_count }}
    - run: cat body.log

    #  create Github release with release note from file and binary asset attached
    - uses: ncipollo/release-action@v1
      with:
        name: ${{ env.GITHUB_REF_NAME }}
        tag: ${{ env.GITHUB_REF_NAME }}
        artifacts: "build/libs/csaf-cms.jar"
        bodyFile: "body.log"
        token: ${{ secrets.GITHUB_TOKEN }}

#    - name: Get current version
#      id: get_version
#      run: echo "::set-output name=version::$(./gradlew properties -q | grep '^version:' | awk '{print $2}')"#

#    - name: Determine increment level
#      id: determine_increment_level
#      run: |
#        if [[ ${{ github.event_name }} == 'pull_request' ]]; then
#          PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | awk '{print tolower($0)}')
#          if [[ $PR_TITLE == *'[minor]'* ]]; then
#            echo "::set-output name=increment_level::minor"
#          elif [[ $PR_TITLE == *'[patch]'* ]]; then
#            echo "::set-output name=increment_level::patch"
#          else
#            echo "::set-output name=increment_level::none"
#          fi
#        else
#          echo "::set-output name=increment_level::none"
#        fi

#    - name: Increment version
#      id: increment_version
#      run: |
#        if [[ "${{ steps.determine_increment_level.outputs.increment_level }}" == "minor" ]]; then
#          echo "::set-output name=version::$(echo ${{ steps.get_version.outputs.version }} | awk -F '.' '{print $1 "." $2+1 ".0"}')"
#        elif [[ "${{ steps.determine_increment_level.outputs.increment_level }}" == "patch" ]]; then
#          echo "::set-output name=version::$(echo ${{ steps.get_version.outputs.version }} | awk -F '.' '{print $1 "." $2 "." $3+1}')"
#        else
#          echo "::set-output name=version::${{ steps.get_version.outputs.version }}"
#        fi

#    - name: Update version in build.gradle
#      run: sed -i "s/version '${{ steps.get_version.outputs.version }}'/version '${{ steps.increment_version.outputs.version }}'/" build.gradle

#    - name: Build project
#      run: ./gradlew clean build bootJar

#    - name: Create release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ steps.increment_version.outputs.version }}
#        draft: false
#        prerelease: false

#    - name: Upload artifact
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./build/libs/csaf-cms-backend-${{ steps.increment_version.outputs.version }}.jar
#        asset_name: csaf-cms-backend-${{ steps.increment_version.outputs.version }}.jar
#        asset_content_type: application/java-archive

#    - name: Add Git tag
#      run: git tag ${{ steps.increment_version.outputs.version }}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

 #   - name: Push Git tag
  #    run: git push origin ${{ steps.increment_version.outputs.version }}
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
